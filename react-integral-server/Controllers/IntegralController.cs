
using Microsoft.AspNetCore.Mvc;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace ReactBackEnd.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class IntegralController : ControllerBase
    {

        [HttpGet("getQuestions")]
        public ActionResult<List<string>> GetQuestions()
        {
            List<string> questions = new List<string>()
            {
                "1. Приближенным числом а называют число, незначительно отличающиеся от:",
                "2. а называется приближенным значением А по недостатку, если:",
                "3. Числовой ряд названия сходящимся, если  ",//21
                "4. С помощью  этого метода число верных  цифр примерно удваивается на  каждом этапе  по сравнению с первоначальным количеством:",//27
                "5. Две матрицы одного и того же типа, имеющие одинаковое число строк и столбцов, и соответствующие элементы их равны, называют:",//38
                "6. Заменив в матрице типа m×n строки соответственно столбцами получим:",//41
                "7. С какой матрицей совпадает дважды транспонированная матрица:",//42
                "8. Максимальный порядок минора матрицы, отличного от нуля, называют:",//44
                "9. Метод позволяющий получить корни системы с заданной точностью путем сходящихся бесконечных процессов:",//51
                "10.  Как иначе называют метод Ньютона?"//76
            };

            return questions;

        }

        [HttpGet("getAnswers")]
        public ActionResult<List<string[]>> GetAnswers()
        {
            List<string[]> answers = new List<string[]>
            {
                new string[]{ "точного А","неточного А","среднего А","приблизительного А" },//1 1
                new string[]{ "a > A", "а < А", "a = A", "a ≥ A" },//2 2
                new string[]{ "можно найти сумму ряда", "существует последовательность", "существует предел последовательности его частных сумм", "частные суммы равны нулю" },//3 3
                new string[]{ "формула Тейлора","формула Маклорена","метод Крамера","процесс Герона" },//4
                new string[]{ "равными", "одинаковыми","разными по рангу","схожими" },//5 1
                new string[]{ "равную матрицу", "транспонированную матрицу", "среднюю матрицу", "обратную матрицу" },//6 2
                new string[]{ "с обратной", "с нулевой", "с исходной", "с единичной" },//7 3
                new string[]{ "пределом", "рядом", "сходимостью", "рангом" },//8 4
                new string[]{ "итерационный метод", "точный метод", "приближенный метод", "относительный метод" },//9 1
                new string[]{ "Метод коллокации", "Метод касательных", "Метод прогонки", "Метод итераций" },//10 2
            };

            return answers;
        }

        [HttpPost("checkAnswers")]
        public ActionResult<double> CheckAnswers([FromBody] List<int> data)
        {
            List<int> expected = new List<int>() { 1, 2, 3, 4, 1, 2, 3, 4, 1, 2 };
            double mark = 0.0;
            for (int i = 0; i < data.Count; i++)
            {
                if (data[i] == expected[i]) mark += 0.5;
            }

            return mark;
        }

      
    }
}
